;;; zenmelt-theme.el --- A Zenburn clone -*- lexical-binding: t; -*-

;; Copyright (C) 2021 Mathieu Marques

;; Author: Mathieu Marques <mathieumarques78@gmail.com>
;; Created: February 08, 2021
;; Homepage: https://github.com/angrybacon/zenmelt

;; This program is free software. You can redistribute it and/or modify it under
;; the terms of the Do What The Fuck You Want To Public License, version 2 as
;; published by Sam Hocevar.
;;
;; This program is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
;; FOR A PARTICULAR PURPOSE.
;;
;; You should have received a copy of the Do What The Fuck You Want To Public
;; License along with this program. If not, see http://www.wtfpl.net/.

;;; Commentary:

;; An opinionated take on the ever popular Zenburn theme.
;;
;; The present theme is not meant to be exhaustive. Packages that I don't use
;; are left un-themed on purpose.

;;; Code:

(deftheme zenmelt "The Zenmelt color theme")

(defvar zenmelt-colors-alist
  '(("bg-4"     . "#000000")
    ("bg-3"     . "#2B2B2B")
    ("bg-2"     . "#303030")
    ("bg-1"     . "#383838")
    ("bg"       . "#3F3F3F")
    ("bg+1"     . "#494949")
    ("bg+2"     . "#4F4F4F")
    ("bg+3"     . "#5F5F5F")
    ("bg+4"     . "#6F6F6F")
    ("blue-5"   . "#366060")
    ("blue-4"   . "#4C7073")
    ("blue-3"   . "#5C888B")
    ("blue-2"   . "#6CA0A3")
    ("blue-1"   . "#7CB8BB")
    ("blue"     . "#8CD0D3")
    ("blue+1"   . "#94BFF3")
    ("blue+2"   . "#ACE0E3")
    ("blue+3"   . "#BDE0F3")
    ("cyan"     . "#93E0E3")
    ("fg-2"     . "#656555")
    ("fg-1"     . "#989890")
    ("fg"       . "#DCDCCC")
    ("fg+1"     . "#FFFFEF")
    ("fg+2"     . "#FFFFFD")
    ("green-5"  . "#2F4F2F")
    ("green-4"  . "#3F5F3F")
    ("green-3"  . "#4F6F4F")
    ("green-2"  . "#5F7F5F")
    ("green-1"  . "#6F8F6F")
    ("green"    . "#7F9F7F")
    ("green+1"  . "#8FB28F")
    ("green+2"  . "#9FC59F")
    ("green+3"  . "#AFD8AF")
    ("green+4"  . "#BFEBBF")
    ("magenta"  . "#DC8CC3")
    ("orange"   . "#DFAF8F")
    ("red-6"    . "#6C3333")
    ("red-5"    . "#7C4343")
    ("red-4"    . "#8C5353")
    ("red-3"    . "#9C6363")
    ("red-2"    . "#AC7373")
    ("red-1"    . "#BC8383")
    ("red"      . "#CC9393")
    ("red+1"    . "#DCA3A3")
    ("red+2"    . "#ECB3B3")
    ("yellow-2" . "#D0BF8F")
    ("yellow-1" . "#E0CF9F")
    ("yellow"   . "#F0DFAF"))
  "List of Zenmelt colors.")

(defmacro zenmelt-with-colors (immediate &rest body)
  "Let-bind all colors defined in `zenmelt-colors-alist' around BODY.
With IMMEDIATE non nil, allow style changes immediately.
See `custom--inhibit-theme-enable'."
  (declare (indent defun))
  `(let ((class '((class color) (min-colors 89)))
         (custom--inhibit-theme-enable (if ,immediate nil custom--inhibit-theme-enable))
         ,@(mapcar (lambda (cons) (list (intern (car cons)) (cdr cons)))
                   zenmelt-colors-alist))
     ,@body))

;;; Theme Faces
(zenmelt-with-colors nil
  (custom-theme-set-faces 'zenmelt
;;;; Built-in
;;;;; Base
    `(default                           ((t :background ,bg :foreground ,fg)))
    `(error                             ((t :foreground ,red)))
    `(escape-glyph                      ((t :foreground ,yellow :weight bold)))
    `(font-lock-builtin-face            ((t :foreground ,fg+1)))
    `(font-lock-comment-delimiter-face  ((t :foreground ,green-2)))
    `(font-lock-comment-face            ((t :foreground ,green)))
    `(font-lock-constant-face           ((t :foreground ,green+4)))
    `(font-lock-doc-face                ((t :foreground ,green+2)))
    `(font-lock-function-name-face      ((t :foreground ,cyan)))
    `(font-lock-keyword-face            ((t :foreground ,yellow :weight bold)))
    `(font-lock-negation-char-face      ((t :foreground ,yellow :weight bold)))
    `(font-lock-preprocessor-face       ((t :foreground ,blue+1)))
    `(font-lock-regexp-grouping-backslash ((t :foreground ,green :weight bold)))
    `(font-lock-regexp-grouping-construct ((t :foreground ,yellow :weight bold)))
    `(font-lock-string-face             ((t :foreground ,red)))
    `(font-lock-type-face               ((t :foreground ,blue-1)))
    `(font-lock-variable-name-face      ((t :foreground ,orange)))
    `(font-lock-warning-face            ((t :foreground ,yellow-2 :weight bold)))
    `(highlight                         ((t :background ,blue-5 :foreground ,blue)))
    `(link                              ((t :foreground ,yellow :underline t)))
    `(link-visited                      ((t :foreground ,yellow-2 :underline t)))
    `(shadow                            ((t :foreground ,fg-1)))
    `(success                           ((t :foreground ,green :weight bold)))
    `(warning                           ((t :foreground ,orange :weight bold)))
;;;;; Applications
    `(eww-invalid-certificate           ((t :inherit error)))
    `(eww-valid-certificate             ((t :inherit success)))
;;;;; Compilation
    `(compilation-column-face           ((t :foreground ,yellow)))
    `(compilation-enter-directory-face  ((t :foreground ,green)))
    `(compilation-error-face            ((t :foreground ,red-1 :underline t)))
    `(compilation-face                  ((t :foreground ,fg)))
    `(compilation-info                  ((t :foreground ,green+4 :underline t)))
    `(compilation-info-face             ((t :foreground ,blue)))
    `(compilation-leave-directory-face  ((t :foreground ,green)))
    `(compilation-line-face             ((t :foreground ,yellow)))
    `(compilation-line-number           ((t :foreground ,yellow)))
    `(compilation-message-face          ((t :foreground ,blue)))
    `(compilation-mode-line-exit        ((t :foreground ,green+2 :weight bold)))
    `(compilation-mode-line-fail        ((t :foreground ,red :weight bold)))
    `(compilation-mode-line-run         ((t :foreground ,yellow :weight bold)))
    `(compilation-warning-face          ((t :foreground ,orange :underline t)))
;;;;; Customize
    `(custom-group-tag                  ((t :foreground ,blue)))
    `(custom-state                      ((t :foreground ,green+4)))
    `(custom-variable-tag               ((t :foreground ,blue :weight bold)))
;;;;; Diff
    `(diff-added                        ((t :foreground ,green)))
    `(diff-changed                      ((t :foreground ,yellow)))
    `(diff-file-header                  ((,class :background ,bg+3) (t :inverse-video t)))
    `(diff-header                       ((,class :background ,bg+3) (t :inverse-video t)))
    `(diff-refine-added                 ((t :background ,bg+3)))
    `(diff-refine-changed               ((t :inherit diff-refine-added)))
    `(diff-refine-removed               ((t :inherit diff-refine-added)))
    `(diff-removed                      ((t :foreground ,red-2)))
;;;;; Help
    `(Info-quoted                       ((t :inherit font-lock-constant-face)))
    `(woman-bold                        ((t :inherit font-lock-keyword-face)))
    `(woman-italic                      ((t :inherit (font-lock-string-face italic))))
;;;;; Interface
    `(button                            ((t :underline t)))
    `(cursor                            ((t :background ,fg+1 :foreground ,fg)))
    `(fringe                            ((t :foreground ,fg)))
    `(header-line                       ((t :background ,bg-3
                                            :box (:color ,bg-3 :line-width 4)
                                            :foreground ,yellow)))
    `(hl-line                           ((t :background ,bg+2)))
    `(line-number                       ((t :foreground ,bg+4)))
    `(line-number-current-line          ((t :foreground ,yellow-2 :inherit line-number)))
    `(menu                              ((t :foreground ,fg :background ,bg)))
    `(mode-line                         ((,class :background ,bg-3 :foreground ,green+1)
                                         (t :inverse-video t)))
    `(mode-line-buffer-id               ((t :foreground ,yellow :weight bold)))
    `(mode-line-inactive                ((t :background ,bg-1 :foreground ,green-2)))
    `(minibuffer-prompt                 ((t :foreground ,yellow)))
    `(region                            ((,class :background ,blue-5)
                                         (t :inverse-video t)))
    `(secondary-selection               ((t :background ,bg+3)))
    `(tooltip                           ((t :background ,bg+2 :foreground ,fg)))
    `(trailing-whitespace               ((t :background ,red)))
    `(vertical-border                   ((t :inherit default)))
    `(widget-field                      ((t :background ,bg+4 :foreground ,fg)))
    `(window-divider                    ((t :inherit vertical-border :inverse-video t)))
    `(window-divider-first-pixel        ((t :inherit window-divider)))
    `(window-divider-last-pixel         ((t :inherit window-divider)))
;;;;; Org
    `(org-agenda-date-today             ((t :foreground ,fg+1 :slant italic)))
    `(org-agenda-structure              ((t :inherit font-lock-comment-face)))
    `(org-archived                      ((t :foreground ,fg :weight bold)))
    `(org-block                         ((t :background ,bg+1 :extend t)))
    `(org-checkbox                      ((t :background ,bg+3
                                            :box (:line-width 1 :style released-button)
                                            :foreground ,fg+1)))
    `(org-column                        ((t :background ,bg-3)))
    `(org-column-title                  ((t :background ,bg-3 :underline t)))
    `(org-date                          ((t :foreground ,blue :underline t)))
    `(org-deadline-announce             ((t :foreground ,red-1)))
    `(org-document-info                 ((t :foreground ,blue)))
    `(org-document-title                ((t :foreground ,blue :weight bold)))
    `(org-done                          ((t :foreground ,green+3 :weight bold)))
    `(org-ellipsis                      ((t :foreground ,yellow-1 :underline t)))
    `(org-footnote                      ((t :foreground ,cyan :underline t)))
    `(org-formula                       ((t :foreground ,yellow-2)))
    `(org-habit-alert-face              ((t :background ,yellow-1 :foreground ,bg)))
    `(org-habit-alert-future-face       ((t :background ,yellow-2 :foreground ,bg)))
    `(org-habit-clear-face              ((t :background ,blue-3)))
    `(org-habit-clear-future-face       ((t :background ,blue-4)))
    `(org-habit-overdue-face            ((t :background ,red-3)))
    `(org-habit-overdue-future-face     ((t :background ,red-4)))
    `(org-habit-ready-face              ((t :background ,green)))
    `(org-habit-ready-future-face       ((t :background ,green-2)))
    `(org-headline-done                 ((t :foreground ,green+3)))
    `(org-hide                          ((t :foreground ,bg)))
    `(org-level-1                       ((t :foreground ,orange)))
    `(org-level-2                       ((t :foreground ,green+4)))
    `(org-level-3                       ((t :foreground ,blue-1)))
    `(org-level-4                       ((t :foreground ,yellow-2)))
    `(org-level-5                       ((t :foreground ,cyan)))
    `(org-level-6                       ((t :foreground ,green+2)))
    `(org-level-7                       ((t :foreground ,red-4)))
    `(org-level-8                       ((t :foreground ,blue-4)))
    `(org-link                          ((t :foreground ,yellow-2 :underline t)))
    `(org-mode-line-clock               ((t :foreground ,fg :background ,bg-3)))
    `(org-mode-line-clock-overrun       ((t :background ,red-1 :foreground ,bg)))
    `(org-quote                         ((t :background ,bg+1 :extend t)))
    `(org-scheduled                     ((t :foreground ,green+4)))
    `(org-scheduled-previously          ((t :foreground ,red)))
    `(org-scheduled-today               ((t :foreground ,blue+1)))
    `(org-sexp-date                     ((t :foreground ,blue+1 :underline t)))
    `(org-special-keyword               ((t :inherit font-lock-comment-face)))
    `(org-table                         ((t :foreground ,green+2)))
    `(org-tag                           ((t :weight bold)))
    `(org-time-grid                     ((t :foreground ,orange)))
    `(org-todo                          ((t :foreground ,red :weight bold)))
    `(org-upcoming-deadline             ((t :inherit font-lock-keyword-face)))
    `(org-warning                       ((t :foreground ,red)))
;;;;; Search
    `(grep-context-face                 ((t :foreground ,fg)))
    `(grep-error-face                   ((t :foreground ,red-1 :underline t)))
    `(grep-hit-face                     ((t :foreground ,blue)))
    `(grep-match-face                   ((t :foreground ,orange :weight bold)))
    `(isearch                           ((t :background ,blue :foreground ,bg-3)))
    `(isearch-fail                      ((t :foreground ,red)))
    `(lazy-highlight                    ((t :inherit highlight)))
    `(match                             ((t :background ,bg-3 :foreground ,orange)))
;;;; Third-party
;;;;; Completion
    `(company-preview                   ((t :background ,green+2)))
    `(company-preview-common            ((t :background ,bg-3 :inherit 'company-preview)))
    `(company-scrollbar-bg              ((t :background ,bg+3)))
    `(company-scrollbar-fg              ((t :background ,bg-3)))
    `(company-tooltip                   ((t :inherit 'tooltip)))
    `(company-tooltip-annotation        ((t :foreground ,orange)))
    `(company-tooltip-common            ((t :foreground ,green+2)))
    `(company-tooltip-common-selection  ((t :inherit 'company-tooltip-common)))
    `(company-tooltip-mouse             ((t :inherit 'company-tooltip-selection)))
    `(company-tooltip-selection         ((t :background ,bg-3)))
    `(completions-annotations           ((t :foreground ,fg-1)))
    `(consult-preview-cursor            ((t :inherit isearch)))
    `(consult-preview-line              ((t :extend t :inherit highlight)))
    `(orderless-match-face-0            ((t :inherit highlight)))
    `(orderless-match-face-1            ((t :background ,fg-2 :foreground ,yellow)))
    `(orderless-match-face-2            ((t :background ,green-4 :foreground ,green+4)))
    `(orderless-match-face-3            ((t :background ,red-6 :foreground ,red+2)))
    `(selectrum-current-candidate       ((t :inherit highlight)))
    `(selectrum-primary-highlight       ((t :background ,green-2)))
    `(selectrum-secondary-highlight     ((t :background ,green)))
;;;;; Version Control
;;;;;; Magit: bisect
    `(magit-bisect-good                 ((t :foreground ,green)))
    `(magit-bisect-skip                 ((t :foreground ,yellow)))
    `(magit-bisect-bad                  ((t :foreground ,red)))
;;;;;; Magit: blame
    `(magit-blame-heading               ((t :background ,bg-3 :foreground ,blue-2)))
    `(magit-blame-hash                  ((t :background ,bg-3 :foreground ,blue-2)))
    `(magit-blame-name                  ((t :background ,bg-3 :foreground ,orange)))
    `(magit-blame-date                  ((t :background ,bg-3 :foreground ,orange)))
    `(magit-blame-summary               ((t :background ,bg-3 :foreground ,blue-2)))
;;;;;; Magit: diff
    `(magit-diff-added                  ((t :inherit diff-added)))
    `(magit-diff-added-highlight        ((t :foreground ,green+2
                                            :inherit magit-diff-context-highlight)))
    `(magit-diff-context                ((t :inherit shadow)))
    `(magit-diff-context-highlight      ((t :background ,bg+1
                                            :inherit magit-diff-context)))
    `(magit-diff-file-heading           ((t :weight bold)))
    `(magit-diff-file-heading-highlight ((t :background ,bg+1 :weight bold)))
    `(magit-diff-file-heading-selection ((t :background ,bg+1 :foreground ,orange)))
    `(magit-diff-hunk-heading           ((t :background ,bg+2)))
    `(magit-diff-hunk-heading-highlight ((t :background ,bg+3)))
    `(magit-diff-hunk-heading-selection ((t :background ,bg+3 :foreground ,orange)))
    `(magit-diff-hunk-region            ((t :inherit region)))
    `(magit-diff-lines-heading          ((t :background ,orange :foreground ,bg+3)))
    `(magit-diff-removed                ((t :inherit diff-removed)))
    `(magit-diff-removed-highlight      ((t :foreground ,red
                                            :inherit magit-diff-context-highlight)))
    `(magit-diffstat-added              ((t :foreground ,green+4)))
    `(magit-diffstat-removed            ((t :foreground ,red)))
;;;;;; Magit: headings
    `(magit-section-highlight           ((t :background ,bg+1)))
    `(magit-section-heading             ((t :foreground ,yellow :weight bold)))
    `(magit-section-heading-selection   ((t :foreground ,orange :weight bold)))
;;;;;; Magit: popup
    `(magit-popup-argument              ((t :foreground ,green :weight bold)))
    `(magit-popup-disabled-argument     ((t :foreground ,fg-2 :weight normal)))
    `(magit-popup-heading               ((t :foreground ,yellow :weight bold)))
    `(magit-popup-key                   ((t :foreground ,green-2 :weight bold)))
    `(magit-popup-option-value          ((t :foreground ,blue-2 :weight bold)))
;;;;;; Magit: log
    `(magit-log-author                  ((t :foreground ,orange)))
    `(magit-log-date                    ((t :foreground ,fg-2)))
    `(magit-log-graph                   ((t :foreground ,fg+1)))
;;;;;; Magit: process
    `(magit-process-ok                  ((t :foreground ,green :weight bold)))
    `(magit-process-ng                  ((t :foreground ,red :weight bold)))
;;;;;; Magit: references
    `(magit-branch-current              ((t :foreground ,blue :weight bold :box t)))
    `(magit-branch-local                ((t :foreground ,blue :weight bold)))
    `(magit-branch-remote               ((t :foreground ,green :weight bold)))
    `(magit-cherry-equivalent           ((t :foreground ,magenta)))
    `(magit-cherry-unmatched            ((t :foreground ,cyan)))
    `(magit-dimmed                      ((t :foreground ,bg+4)))
    `(magit-hash                        ((t :foreground ,bg+4)))
    `(magit-head                        ((t :foreground ,blue :weight bold)))
    `(magit-reflog-amend                ((t :foreground ,magenta)))
    `(magit-reflog-checkout             ((t :foreground ,blue)))
    `(magit-reflog-cherry-pick          ((t :foreground ,green)))
    `(magit-reflog-commit               ((t :foreground ,green)))
    `(magit-reflog-merge                ((t :foreground ,green)))
    `(magit-reflog-other                ((t :foreground ,cyan)))
    `(magit-reflog-rebase               ((t :foreground ,magenta)))
    `(magit-reflog-remote               ((t :foreground ,cyan)))
    `(magit-reflog-reset                ((t :foreground ,red)))
    `(magit-refname                     ((t :background ,bg+3 :foreground ,fg)))
    `(magit-refname-stash               ((t :background ,bg+3 :foreground ,fg)))
    `(magit-refname-wip                 ((t :background ,bg+3 :foreground ,fg)))
    `(magit-signature-bad               ((t :foreground ,red)))
    `(magit-signature-error             ((t :inherit magit-signature-bad)))
    `(magit-signature-expired           ((t :foreground ,orange)))
    `(magit-signature-good              ((t :foreground ,green)))
    `(magit-signature-revoked           ((t :foreground ,magenta)))
    `(magit-signature-untrusted         ((t :foreground ,yellow)))
    `(magit-tag                         ((t :foreground ,orange :weight bold)))
;;;;;; Magit: sequence
    `(magit-sequence-done               ((t :foreground ,fg-2)))
    `(magit-sequence-drop               ((t :foreground ,red)))
    `(magit-sequence-head               ((t :foreground ,blue)))
    `(magit-sequence-onto               ((t :foreground ,fg-2)))
    `(magit-sequence-part               ((t :foreground ,yellow)))
    `(magit-sequence-pick               ((t :foreground ,yellow-2)))
    `(magit-sequence-stop               ((t :foreground ,green)))
;;;; TODO
;;;;; git-annex
    `(git-annex-dired-annexed-available ((t :inherit success :weight normal)))
    `(git-annex-dired-annexed-unavailable ((t :inherit error :weight normal)))
;;;;; git-commit
    `(git-commit-comment-action         ((,class :foreground ,green+1 :weight bold)))
    `(git-commit-comment-branch         ((,class :foreground ,blue+1 :weight bold))) ; Obsolete
    `(git-commit-comment-branch-local   ((,class :foreground ,blue+1 :weight bold)))
    `(git-commit-comment-branch-remote  ((,class :foreground ,green :weight bold)))
    `(git-commit-comment-heading        ((,class :foreground ,yellow :weight bold)))
;;;;; git-gutter
    `(git-gutter:added                  ((t :foreground ,green :inverse-video t)))
    `(git-gutter:deleted                ((t :foreground ,red :inverse-video t)))
    `(git-gutter:modified               ((t :foreground ,blue-2 :inverse-video t)))
    `(git-gutter:unchanged              ((t :foreground ,fg :inverse-video t)))
;;;;; git-gutter-fr
    `(git-gutter-fr:added               ((t :foreground ,green)))
    `(git-gutter-fr:deleted             ((t :foreground ,red)))
    `(git-gutter-fr:modified            ((t :foreground ,blue-2)))
;;;;; git-rebase
    `(git-rebase-hash                   ((t :foreground, orange)))
;;;;; ediff
    `(ediff-current-diff-A              ((t :background ,red-4 :foreground ,fg)))
    `(ediff-current-diff-Ancestor       ((t :background ,red-4 :foreground ,fg)))
    `(ediff-current-diff-B              ((t :background ,green-2 :foreground ,fg)))
    `(ediff-current-diff-C              ((t :background ,blue-5 :foreground ,fg)))
    `(ediff-even-diff-A                 ((t :background ,bg+2)))
    `(ediff-even-diff-Ancestor          ((t :background ,bg+2)))
    `(ediff-even-diff-B                 ((t :background ,bg+2)))
    `(ediff-even-diff-C                 ((t :background ,bg+2)))
    `(ediff-fine-diff-A                 ((t :background ,red-2 :foreground ,fg)))
    `(ediff-fine-diff-Ancestor          ((t :background ,red-2 :foreground ,fg)))
    `(ediff-fine-diff-B                 ((t :background ,green :foreground ,fg)))
    `(ediff-fine-diff-C                 ((t :background ,blue-3 :foreground ,fg)))
    `(ediff-odd-diff-A                  ((t :background ,bg+3)))
    `(ediff-odd-diff-Ancestor           ((t :background ,bg+3)))
    `(ediff-odd-diff-B                  ((t :background ,bg+3)))
    `(ediff-odd-diff-C                  ((t :background ,bg+3)))
;;;;; diff-hl
    `(diff-hl-change                    ((,class :background ,blue-2 :foreground ,blue)))
    `(diff-hl-delete                    ((,class :background ,red-1 :foreground ,red+1)))
    `(diff-hl-insert                    ((,class :background ,green-2
                                                 :foreground ,green+1)))
;;;;; ace-jump
    `(ace-jump-face-background          ((t :foreground ,fg-2 :background ,bg :inverse-video nil)))
    `(ace-jump-face-foreground          ((t :foreground ,green+2 :background ,bg :inverse-video nil)))
;;;;; anzu
    `(anzu-mode-line                    ((t :foreground ,cyan :weight bold)))
    `(anzu-mode-line-no-match           ((t :foreground ,red :weight bold)))
    `(anzu-match-1                      ((t :foreground ,bg :background ,green)))
    `(anzu-match-2                      ((t :foreground ,bg :background ,orange)))
    `(anzu-match-3                      ((t :foreground ,bg :background ,blue)))
    `(anzu-replace-to                   ((t :inherit anzu-replace-highlight :foreground ,yellow)))
;;;;; avy
    `(avy-background-face               ((t :foreground ,fg-2 :background ,bg :inverse-video nil)))
    `(avy-lead-face-0                   ((t :foreground ,green+3 :background ,bg :inverse-video nil :weight bold)))
    `(avy-lead-face-1                   ((t :foreground ,yellow :background ,bg :inverse-video nil :weight bold)))
    `(avy-lead-face-2                   ((t :foreground ,red+1 :background ,bg :inverse-video nil :weight bold)))
    `(avy-lead-face                     ((t :foreground ,cyan :background ,bg :inverse-video nil :weight bold)))
;;;;; bm
    `(bm-face                           ((t :background ,yellow-1 :foreground ,bg)))
    `(bm-fringe-face                    ((t :background ,yellow-1 :foreground ,bg)))
    `(bm-fringe-persistent-face         ((t :background ,green-2 :foreground ,bg)))
    `(bm-persistent-face                ((t :background ,green-2 :foreground ,bg)))
;;;;; cider
    `(cider-result-overlay-face         ((t :background unspecified)))
    `(cider-enlightened-face            ((t :box (:color ,orange :line-width -1))))
    `(cider-enlightened-local-face      ((t :weight bold :foreground ,green+1)))
    `(cider-deprecated-face             ((t :background ,yellow-2)))
    `(cider-instrumented-face           ((t :box (:color ,red :line-width -1))))
    `(cider-traced-face                 ((t :box (:color ,cyan :line-width -1))))
    `(cider-test-failure-face           ((t :background ,red-4)))
    `(cider-test-error-face             ((t :background ,magenta)))
    `(cider-test-success-face           ((t :background ,green-2)))
    `(cider-fringe-good-face            ((t :foreground ,green+4)))
;;;;; circe
    `(circe-highlight-nick-face         ((t :foreground ,cyan)))
    `(circe-my-message-face             ((t :foreground ,fg)))
    `(circe-fool-face                   ((t :foreground ,red+1)))
    `(circe-topic-diff-removed-face     ((t :foreground ,red :weight bold)))
    `(circe-originator-face             ((t :foreground ,fg)))
    `(circe-server-face                 ((t :foreground ,green)))
    `(circe-topic-diff-new-face         ((t :foreground ,orange :weight bold)))
    `(circe-prompt-face                 ((t :foreground ,orange :background ,bg :weight bold)))
;;;;; context-coloring
    `(context-coloring-level-0-face     ((t :foreground ,fg)))
    `(context-coloring-level-1-face     ((t :foreground ,cyan)))
    `(context-coloring-level-2-face     ((t :foreground ,green+4)))
    `(context-coloring-level-3-face     ((t :foreground ,yellow)))
    `(context-coloring-level-4-face     ((t :foreground ,orange)))
    `(context-coloring-level-5-face     ((t :foreground ,magenta)))
    `(context-coloring-level-6-face     ((t :foreground ,blue+1)))
    `(context-coloring-level-7-face     ((t :foreground ,green+2)))
    `(context-coloring-level-8-face     ((t :foreground ,yellow-2)))
    `(context-coloring-level-9-face     ((t :foreground ,red+1)))
;;;;; coq
    `(coq-solve-tactics-face            ((t :foreground nil :inherit font-lock-constant-face)))
;;;;; ctable
    `(ctbl:face-cell-select             ((t :background ,blue :foreground ,bg)))
    `(ctbl:face-continue-bar            ((t :background ,bg-1 :foreground ,bg)))
    `(ctbl:face-row-select              ((t :background ,cyan :foreground ,bg)))
;;;;; debbugs
    `(debbugs-gnu-done                  ((t :foreground ,fg-2)))
    `(debbugs-gnu-handled               ((t :foreground ,green)))
    `(debbugs-gnu-new                   ((t :foreground ,red)))
    `(debbugs-gnu-pending               ((t :foreground ,blue)))
    `(debbugs-gnu-stale                 ((t :foreground ,orange)))
    `(debbugs-gnu-tagged                ((t :foreground ,red)))
;;;;; dim-autoload
    `(dim-autoload-cookie-line          ((t :foreground ,bg+2)))
;;;;; diredfl
    `(diredfl-compressed-file-suffix    ((t :foreground ,orange)))
    `(diredfl-date-time                 ((t :foreground ,magenta)))
    `(diredfl-deletion                  ((t :foreground ,yellow)))
    `(diredfl-deletion-file-name        ((t :foreground ,red)))
    `(diredfl-dir-heading               ((t :foreground ,blue :background ,bg-3)))
    `(diredfl-dir-priv                  ((t :foreground ,cyan)))
    `(diredfl-exec-priv                 ((t :foreground ,red)))
    `(diredfl-executable-tag            ((t :foreground ,green+1)))
    `(diredfl-file-name                 ((t :foreground ,blue)))
    `(diredfl-file-suffix               ((t :foreground ,green)))
    `(diredfl-flag-mark                 ((t :foreground ,yellow)))
    `(diredfl-flag-mark-line            ((t :foreground ,orange)))
    `(diredfl-ignored-file-name         ((t :foreground ,red)))
    `(diredfl-link-priv                 ((t :foreground ,yellow)))
    `(diredfl-no-priv                   ((t :foreground ,fg)))
    `(diredfl-number                    ((t :foreground ,green+1)))
    `(diredfl-other-priv                ((t :foreground ,yellow-1)))
    `(diredfl-rare-priv                 ((t :foreground ,red-1)))
    `(diredfl-read-priv                 ((t :foreground ,green-1)))
    `(diredfl-symlink                   ((t :foreground ,yellow)))
    `(diredfl-write-priv                ((t :foreground ,magenta)))
;;;;; doom-modeline
    `(doom-modeline-bar                 ((t :background nil)))
    `(doom-modeline-bar-inactive        ((t :background nil)))
    `(doom-modeline-evil-emacs-state    ((t :foreground ,magenta)))
    `(doom-modeline-evil-insert-state   ((t :foreground ,blue+1)))
    `(doom-modeline-project-dir         ((t :foreground ,cyan)))
;;;;; egg
    `(egg-text-base                     ((t :foreground ,fg)))
    `(egg-help-header-1                 ((t :foreground ,yellow)))
    `(egg-help-header-2                 ((t :foreground ,green+3)))
    `(egg-branch                        ((t :foreground ,yellow)))
    `(egg-branch-mono                   ((t :foreground ,yellow)))
    `(egg-term                          ((t :foreground ,yellow)))
    `(egg-diff-add                      ((t :foreground ,green+4)))
    `(egg-diff-del                      ((t :foreground ,red+1)))
    `(egg-diff-file-header              ((t :foreground ,yellow-2)))
    `(egg-section-title                 ((t :foreground ,yellow)))
    `(egg-stash-mono                    ((t :foreground ,green+4)))
;;;;; elfeed
    `(elfeed-log-error-level-face       ((t :foreground ,red)))
    `(elfeed-log-info-level-face        ((t :foreground ,blue)))
    `(elfeed-log-warn-level-face        ((t :foreground ,yellow)))
    `(elfeed-search-date-face           ((t :foreground ,yellow-1
                                            :underline t
                                            :weight bold)))
    `(elfeed-search-tag-face            ((t :foreground ,green)))
    `(elfeed-search-feed-face           ((t :foreground ,cyan)))
    `(elfeed-search-title-face          ((t :foreground ,fg-1)))
    `(elfeed-search-unread-title-face   ((t :foreground ,fg :weight bold)))
;;;;; emacs-w3m
    `(w3m-anchor                        ((t :foreground ,yellow :underline t)))
    `(w3m-arrived-anchor                ((t :foreground ,yellow-2 :underline t)))
    `(w3m-form                          ((t :foreground ,red-1 :underline t)))
    `(w3m-header-line-location-title    ((t :foreground ,yellow :underline t)))
    `(w3m-history-current-url           ((t :inherit match)))
    `(w3m-lnum                          ((t :foreground ,green+2 :background ,bg)))
    `(w3m-lnum-match                    ((t :background ,bg-3 :foreground ,orange)))
    `(w3m-lnum-minibuffer-prompt        ((t :foreground ,yellow)))
;;;;; erc
    `(erc-action-face                   ((t :inherit erc-default-face)))
    `(erc-bold-face                     ((t :weight bold)))
    `(erc-current-nick-face             ((t :foreground ,blue :weight bold)))
    `(erc-dangerous-host-face           ((t :inherit font-lock-warning-face)))
    `(erc-default-face                  ((t :foreground ,fg)))
    `(erc-direct-msg-face               ((t :inherit erc-default-face)))
    `(erc-error-face                    ((t :inherit font-lock-warning-face)))
    `(erc-fool-face                     ((t :inherit erc-default-face)))
    `(erc-highlight-face                ((t :inherit hover-highlight)))
    `(erc-input-face                    ((t :foreground ,yellow)))
    `(erc-keyword-face                  ((t :foreground ,blue :weight bold)))
    `(erc-nick-default-face             ((t :foreground ,yellow :weight bold)))
    `(erc-my-nick-face                  ((t :foreground ,red :weight bold)))
    `(erc-nick-msg-face                 ((t :inherit erc-default-face)))
    `(erc-notice-face                   ((t :foreground ,green)))
    `(erc-pal-face                      ((t :foreground ,orange :weight bold)))
    `(erc-prompt-face                   ((t :foreground ,orange :background ,bg)))
    `(erc-timestamp-face                ((t :foreground ,green+4)))
    `(erc-underline-face                ((t :underline t)))
;;;;; eros
    `(eros-result-overlay-face          ((t :background unspecified)))
;;;;; ert
    `(ert-test-result-expected          ((t :foreground ,green+4 :background ,bg)))
    `(ert-test-result-unexpected        ((t :foreground ,red :background ,bg)))
;;;;; eshell
    `(eshell-prompt                     ((t :foreground ,yellow :weight bold)))
    `(eshell-ls-archive                 ((t :foreground ,red-1 :weight bold)))
    `(eshell-ls-backup                  ((t :inherit font-lock-comment-face)))
    `(eshell-ls-clutter                 ((t :inherit font-lock-comment-face)))
    `(eshell-ls-directory               ((t :foreground ,blue+1 :weight bold)))
    `(eshell-ls-executable              ((t :foreground ,red+1 :weight bold)))
    `(eshell-ls-unreadable              ((t :foreground ,fg)))
    `(eshell-ls-missing                 ((t :inherit font-lock-warning-face)))
    `(eshell-ls-product                 ((t :inherit font-lock-doc-face)))
    `(eshell-ls-special                 ((t :foreground ,yellow :weight bold)))
    `(eshell-ls-symlink                 ((t :foreground ,cyan :weight bold)))
;;;;; flx
    `(flx-highlight-face                ((t :foreground ,green+2 :weight bold)))
;;;;; flycheck
    `(flycheck-error                    ((t :underline (:color ,red-1 :style wave))))
    `(flycheck-info                     ((t :underline (:color ,cyan :style wave))))
    `(flycheck-warning                  ((t :underline (:color ,yellow :style wave))))
    `(flycheck-fringe-error             ((t :foreground ,red-1)))
    `(flycheck-fringe-info              ((t :foreground ,cyan)))
    `(flycheck-fringe-warning           ((t :foreground ,yellow)))
;;;;; full-ack
    `(ack-separator                     ((t :foreground ,fg)))
    `(ack-file                          ((t :foreground ,blue)))
    `(ack-line                          ((t :foreground ,yellow)))
    `(ack-match                         ((t :foreground ,orange :background ,bg-3)))
;;;;; go-guru
    `(go-guru-hl-identifier-face        ((t :foreground ,bg-3 :background ,green+1)))
;;;;; guide-key
    `(guide-key/highlight-command-face  ((t :foreground ,blue)))
    `(guide-key/key-face                ((t :foreground ,green)))
    `(guide-key/prefix-command-face     ((t :foreground ,green+1)))
;;;;; hackernews
    `(hackernews-comment-count          ((t :inherit link-visited :underline nil)))
    `(hackernews-link                   ((t :inherit link :underline nil)))
;;;;; highlight-numbers
    `(highlight-numbers-number          ((t :foreground ,blue)))
;;;;; highlight-symbol
    `(highlight-symbol-face             ((t :background ,bg+3)))
;;;;; highlight-thing
    `(highlight-thing                   ((t :background ,bg+3)))
;;;;; hl-sexp
    `(hl-sexp-face                      ((,class :background ,bg+2) (t :weight bold)))
;;;;; hydra
    `(hydra-face-red                    ((t :foreground ,red-1 :background ,bg)))
    `(hydra-face-amaranth               ((t :foreground ,red-3 :background ,bg)))
    `(hydra-face-blue                   ((t :foreground ,blue :background ,bg)))
    `(hydra-face-pink                   ((t :foreground ,magenta :background ,bg)))
    `(hydra-face-teal                   ((t :foreground ,cyan :background ,bg)))
;;;;; info+
    `(info-command-ref-item             ((t :background ,bg-3 :foreground ,orange)))
    `(info-constant-ref-item            ((t :background ,bg-3 :foreground ,magenta)))
    `(info-double-quoted-name           ((t :inherit font-lock-comment-face)))
    `(info-file                         ((t :background ,bg-3 :foreground ,yellow)))
    `(info-function-ref-item            ((t :background ,bg-3 :inherit font-lock-function-name-face)))
    `(info-macro-ref-item               ((t :background ,bg-3 :foreground ,yellow)))
    `(info-menu                         ((t :foreground ,yellow)))
    `(info-quoted-name                  ((t :inherit font-lock-constant-face)))
    `(info-reference-item               ((t :background ,bg-3)))
    `(info-single-quote                 ((t :inherit font-lock-keyword-face)))
    `(info-special-form-ref-item        ((t :background ,bg-3 :foreground ,yellow)))
    `(info-string                       ((t :inherit font-lock-string-face)))
    `(info-syntax-class-item            ((t :background ,bg-3 :foreground ,blue+1)))
    `(info-user-option-ref-item         ((t :background ,bg-3 :foreground ,red)))
    `(info-variable-ref-item            ((t :background ,bg-3 :foreground ,orange)))
;;;;; irfc
    `(irfc-head-name-face               ((t :foreground ,red :weight bold)))
    `(irfc-head-number-face             ((t :foreground ,red :weight bold)))
    `(irfc-reference-face               ((t :foreground ,blue-1 :weight bold)))
    `(irfc-requirement-keyword-face     ((t :inherit font-lock-keyword-face)))
    `(irfc-rfc-link-face                ((t :inherit link)))
    `(irfc-rfc-number-face              ((t :foreground ,cyan :weight bold)))
    `(irfc-std-number-face              ((t :foreground ,green+4 :weight bold)))
    `(irfc-table-item-face              ((t :foreground ,green+3)))
    `(irfc-title-face                   ((t :foreground ,yellow :underline t)))
;;;;; iedit-mode
    `(iedit-occurrence                  ((t :background ,bg+3 :weight bold)))
;;;;; js2-mode
    `(js2-warning                       ((t :underline ,orange)))
    `(js2-error                         ((t :foreground ,red :weight bold)))
    `(js2-jsdoc-tag                     ((t :foreground ,green-2)))
    `(js2-jsdoc-type                    ((t :foreground ,green+2)))
    `(js2-jsdoc-value                   ((t :foreground ,green+3)))
    `(js2-function-param                ((t :foreground, orange)))
    `(js2-external-variable             ((t :foreground ,orange)))
    `(js2-instance-member               ((t :foreground ,green-2)))
    `(js2-jsdoc-html-tag-delimiter      ((t :foreground ,orange)))
    `(js2-jsdoc-html-tag-name           ((t :foreground ,red-1)))
    `(js2-object-property               ((t :foreground ,blue+1)))
    `(js2-magic-paren                   ((t :foreground ,blue-5)))
    `(js2-private-function-call         ((t :foreground ,cyan)))
    `(js2-function-call                 ((t :foreground ,cyan)))
    `(js2-private-member                ((t :foreground ,blue-1)))
    `(js2-keywords                      ((t :foreground ,magenta)))
;;;;; ledger-mode
    `(ledger-font-payee-uncleared-face  ((t :foreground ,red-1 :weight bold)))
    `(ledger-font-payee-cleared-face    ((t :foreground ,fg :weight normal)))
    `(ledger-font-payee-pending-face    ((t :foreground ,red :weight normal)))
    `(ledger-font-xact-highlight-face   ((t :background ,bg+2)))
    `(ledger-font-auto-xact-face        ((t :foreground ,yellow-1 :weight normal)))
    `(ledger-font-periodic-xact-face    ((t :foreground ,green :weight normal)))
    `(ledger-font-pending-face          ((t :foreground ,orange weight: normal)))
    `(ledger-font-other-face            ((t :foreground ,fg)))
    `(ledger-font-posting-date-face     ((t :foreground ,orange :weight normal)))
    `(ledger-font-posting-account-face  ((t :foreground ,blue-1)))
    `(ledger-font-posting-account-cleared-face ((t :foreground ,fg)))
    `(ledger-font-posting-account-pending-face ((t :foreground ,orange)))
    `(ledger-font-posting-amount-face   ((t :foreground ,orange)))
    `(ledger-occur-narrowed-face        ((t :foreground ,fg-2 :invisible t)))
    `(ledger-occur-xact-face            ((t :background ,bg+2)))
    `(ledger-font-comment-face          ((t :foreground ,green)))
    `(ledger-font-reconciler-uncleared-face ((t :foreground ,red-1 :weight bold)))
    `(ledger-font-reconciler-cleared-face ((t :foreground ,fg :weight normal)))
    `(ledger-font-reconciler-pending-face ((t :foreground ,orange :weight normal)))
    `(ledger-font-report-clickable-face ((t :foreground ,orange :weight normal)))
;;;;; linum-mode
    `(linum                             ((t :foreground ,green+2 :background ,bg)))
;;;;; lispy
    `(lispy-command-name-face           ((t :background ,bg-1
                                            :inherit ,font-lock-function-name-face)))
    `(lispy-cursor-face                 ((t :foreground ,bg :background ,fg)))
    `(lispy-face-hint                   ((t :inherit highlight :foreground ,yellow)))
;;;;; lui
    `(lui-time-stamp-face               ((t :foreground ,blue-1)))
    `(lui-hilight-face                  ((t :foreground ,green+2 :background ,bg)))
    `(lui-button-face                   ((t :inherit hover-highlight)))
;;;;; macrostep
    `(macrostep-gensym-1                ((t :foreground ,green+2 :background ,bg-3)))
    `(macrostep-gensym-2                ((t :foreground ,red+1 :background ,bg-3)))
    `(macrostep-gensym-3                ((t :foreground ,blue+1 :background ,bg-3)))
    `(macrostep-gensym-4                ((t :foreground ,magenta :background ,bg-3)))
    `(macrostep-gensym-5                ((t :foreground ,yellow :background ,bg-3)))
    `(macrostep-expansion-highlight-face ((t :inherit highlight)))
    `(macrostep-macro-face              ((t :underline t)))
;;;;; markup-faces
    `(markup-anchor-face                ((t :foreground ,blue+1)))
    `(markup-code-face                  ((t :inherit font-lock-constant-face)))
    `(markup-command-face               ((t :foreground ,yellow)))
    `(markup-emphasis-face              ((t :inherit bold)))
    `(markup-internal-reference-face    ((t :foreground ,yellow-2 :underline t)))
    `(markup-list-face                  ((t :foreground ,fg+1)))
    `(markup-meta-face                  ((t :foreground ,yellow)))
    `(markup-meta-hide-face             ((t :foreground ,yellow)))
    `(markup-secondary-text-face        ((t :foreground ,yellow-1)))
    `(markup-title-0-face               ((t :inherit font-lock-function-name-face)))
    `(markup-title-1-face               ((t :inherit font-lock-function-name-face)))
    `(markup-title-2-face               ((t :inherit font-lock-function-name-face)))
    `(markup-title-3-face               ((t :inherit font-lock-function-name-face)))
    `(markup-title-4-face               ((t :inherit font-lock-function-name-face)))
    `(markup-typewriter-face            ((t :inherit font-lock-constant-face)))
    `(markup-verbatim-face              ((t :inherit font-lock-constant-face)))
    `(markup-value-face                 ((t :foreground ,yellow)))
;;;;; message-mode
    `(message-cited-text                ((t :inherit font-lock-comment-face)))
    `(message-header-name               ((t :foreground ,green+1)))
    `(message-header-other              ((t :foreground ,green)))
    `(message-header-to                 ((t :foreground ,yellow :weight bold)))
    `(message-header-cc                 ((t :foreground ,yellow :weight bold)))
    `(message-header-newsgroups         ((t :foreground ,yellow :weight bold)))
    `(message-header-subject            ((t :foreground ,orange :weight bold)))
    `(message-header-xheader            ((t :foreground ,green)))
    `(message-mml                       ((t :foreground ,yellow :weight bold)))
    `(message-separator                 ((t :inherit font-lock-comment-face)))
;;;;; mew
    `(mew-face-header-subject           ((t :foreground ,orange)))
    `(mew-face-header-from              ((t :foreground ,yellow)))
    `(mew-face-header-date              ((t :foreground ,green)))
    `(mew-face-header-to                ((t :foreground ,red)))
    `(mew-face-header-key               ((t :foreground ,green)))
    `(mew-face-header-private           ((t :foreground ,green)))
    `(mew-face-header-important         ((t :foreground ,blue)))
    `(mew-face-header-marginal          ((t :foreground ,fg :weight bold)))
    `(mew-face-header-warning           ((t :foreground ,red)))
    `(mew-face-header-xmew              ((t :foreground ,green)))
    `(mew-face-header-xmew-bad          ((t :foreground ,red)))
    `(mew-face-body-url                 ((t :foreground ,orange)))
    `(mew-face-body-comment             ((t :foreground ,fg :slant italic)))
    `(mew-face-body-cite1               ((t :foreground ,green)))
    `(mew-face-body-cite2               ((t :foreground ,blue)))
    `(mew-face-body-cite3               ((t :foreground ,orange)))
    `(mew-face-body-cite4               ((t :foreground ,yellow)))
    `(mew-face-body-cite5               ((t :foreground ,red)))
    `(mew-face-mark-review              ((t :foreground ,blue)))
    `(mew-face-mark-escape              ((t :foreground ,green)))
    `(mew-face-mark-delete              ((t :foreground ,red)))
    `(mew-face-mark-unlink              ((t :foreground ,yellow)))
    `(mew-face-mark-refile              ((t :foreground ,green)))
    `(mew-face-mark-unread              ((t :foreground ,red-2)))
    `(mew-face-eof-message              ((t :foreground ,green)))
    `(mew-face-eof-part                 ((t :foreground ,yellow)))
;;;;; mic-paren
    `(paren-face-match                  ((t :foreground ,cyan :background ,bg)))
    `(paren-face-mismatch               ((t :foreground ,bg :background ,magenta)))
    `(paren-face-no-match               ((t :foreground ,bg :background ,red)))
;;;;; mingus
    `(mingus-directory-face             ((t :foreground ,blue)))
    `(mingus-pausing-face               ((t :foreground ,magenta)))
    `(mingus-playing-face               ((t :foreground ,cyan)))
    `(mingus-playlist-face              ((t :foreground ,cyan )))
    `(mingus-mark-face                  ((t :foreground ,magenta)))
    `(mingus-song-file-face             ((t :foreground ,yellow)))
    `(mingus-artist-face                ((t :foreground ,cyan)))
    `(mingus-album-face                 ((t :underline t :foreground ,red+1)))
    `(mingus-album-stale-face           ((t :foreground ,red+1)))
    `(mingus-stopped-face               ((t :foreground ,red)))
;;;;; nav
    `(nav-face-heading                  ((t :foreground ,yellow)))
    `(nav-face-button-num               ((t :foreground ,cyan)))
    `(nav-face-dir                      ((t :foreground ,green)))
    `(nav-face-hdir                     ((t :foreground ,red)))
    `(nav-face-file                     ((t :foreground ,fg)))
    `(nav-face-hfile                    ((t :foreground ,red-4)))
;;;;; mumamo
    `(mumamo-background-chunk-major     ((t :background nil)))
    `(mumamo-background-chunk-submode1  ((t :background ,bg-3)))
    `(mumamo-background-chunk-submode2  ((t :background ,bg+3)))
    `(mumamo-background-chunk-submode3  ((t :background ,bg+4)))
    `(mumamo-background-chunk-submode4  ((t :background ,bg+2)))
;;;;; org-ref
    `(org-ref-ref-face                  ((t :underline t)))
    `(org-ref-label-face                ((t :underline t)))
    `(org-ref-cite-face                 ((t :underline t)))
    `(org-ref-glossary-face             ((t :underline t)))
    `(org-ref-acronym-face              ((t :underline t)))
;;;;; outline
    `(outline-1                         ((t :foreground ,orange)))
    `(outline-2                         ((t :foreground ,green+4)))
    `(outline-3                         ((t :foreground ,blue-1)))
    `(outline-4                         ((t :foreground ,yellow-2)))
    `(outline-5                         ((t :foreground ,cyan)))
    `(outline-6                         ((t :foreground ,green+2)))
    `(outline-7                         ((t :foreground ,red-4)))
    `(outline-8                         ((t :foreground ,blue-4)))
;;;;; p4
    `(p4-depot-added-face               ((t :inherit diff-added)))
    `(p4-depot-branch-op-face           ((t :inherit diff-changed)))
    `(p4-depot-deleted-face             ((t :inherit diff-removed)))
    `(p4-depot-unmapped-face            ((t :inherit diff-changed)))
    `(p4-diff-change-face               ((t :inherit diff-changed)))
    `(p4-diff-del-face                  ((t :inherit diff-removed)))
    `(p4-diff-file-face                 ((t :inherit diff-file-header)))
    `(p4-diff-head-face                 ((t :inherit diff-header)))
    `(p4-diff-ins-face                  ((t :inherit diff-added)))
;;;;; c/perl
    `(cperl-nonoverridable-face         ((t :foreground ,magenta)))
    `(cperl-array-face                  ((t :foreground ,yellow, :background ,bg)))
    `(cperl-hash-face                   ((t :foreground ,yellow-1, :background ,bg)))
;;;;; paren-face
    `(parenthesis                       ((t :foreground ,fg-2)))
;;;;; racket-mode
    `(racket-keyword-argument-face      ((t :inherit font-lock-constant-face)))
    `(racket-selfeval-face              ((t :inherit font-lock-type-face)))
;;;;; rainbow-delimiters
    `(rainbow-delimiters-depth-1-face   ((t :foreground ,fg)))
    `(rainbow-delimiters-depth-2-face   ((t :foreground ,green+4)))
    `(rainbow-delimiters-depth-3-face   ((t :foreground ,yellow-2)))
    `(rainbow-delimiters-depth-4-face   ((t :foreground ,cyan)))
    `(rainbow-delimiters-depth-5-face   ((t :foreground ,green+2)))
    `(rainbow-delimiters-depth-6-face   ((t :foreground ,blue+1)))
    `(rainbow-delimiters-depth-7-face   ((t :foreground ,yellow-1)))
    `(rainbow-delimiters-depth-8-face   ((t :foreground ,green+1)))
    `(rainbow-delimiters-depth-9-face   ((t :foreground ,blue-2)))
    `(rainbow-delimiters-depth-10-face  ((t :foreground ,orange)))
    `(rainbow-delimiters-depth-11-face  ((t :foreground ,green)))
    `(rainbow-delimiters-depth-12-face  ((t :foreground ,blue-5)))
;;;;; rcirc
    `(rcirc-my-nick                     ((t :foreground ,blue)))
    `(rcirc-other-nick                  ((t :foreground ,orange)))
    `(rcirc-bright-nick                 ((t :foreground ,blue+1)))
    `(rcirc-dim-nick                    ((t :foreground ,blue-2)))
    `(rcirc-server                      ((t :foreground ,green)))
    `(rcirc-server-prefix               ((t :foreground ,green+1)))
    `(rcirc-timestamp                   ((t :foreground ,green+2)))
    `(rcirc-nick-in-message             ((t :foreground ,yellow)))
    `(rcirc-nick-in-message-full-line   ((t :weight bold)))
    `(rcirc-prompt                      ((t :foreground ,yellow :weight bold)))
    `(rcirc-track-nick                  ((t :inverse-video t)))
    `(rcirc-track-keyword               ((t :weight bold)))
    `(rcirc-url                         ((t :weight bold)))
    `(rcirc-keyword                     ((t :foreground ,yellow :weight bold)))
;;;;; re-builder
    `(reb-match-0                       ((t :foreground ,bg :background ,magenta)))
    `(reb-match-1                       ((t :foreground ,bg :background ,blue)))
    `(reb-match-2                       ((t :foreground ,bg :background ,orange)))
    `(reb-match-3                       ((t :foreground ,bg :background ,red)))
;;;;; realgud
    `(realgud-overlay-arrow1            ((t :foreground ,green)))
    `(realgud-overlay-arrow2            ((t :foreground ,yellow)))
    `(realgud-overlay-arrow3            ((t :foreground ,orange)))
    `(realgud-bp-enabled-face           ((t :inherit error)))
    `(realgud-bp-disabled-face          ((t :inherit secondary-selection)))
    `(realgud-bp-line-enabled-face      ((t :box (:color ,red :style nil))))
    `(realgud-bp-line-disabled-face     ((t :box (:color "grey70" :style nil))))
    `(realgud-line-number               ((t :foreground ,yellow)))
    `(realgud-backtrace-number          ((t :foreground ,yellow, :weight bold)))
;;;;; regex-tool
    `(regex-tool-matched-face           ((t :background ,blue-4 :weight bold)))
;;;;; rpm-mode
    `(rpm-spec-dir-face                 ((t :foreground ,green)))
    `(rpm-spec-doc-face                 ((t :foreground ,green)))
    `(rpm-spec-ghost-face               ((t :foreground ,red)))
    `(rpm-spec-macro-face               ((t :foreground ,yellow)))
    `(rpm-spec-obsolete-tag-face        ((t :foreground ,red)))
    `(rpm-spec-package-face             ((t :foreground ,red)))
    `(rpm-spec-section-face             ((t :foreground ,yellow)))
    `(rpm-spec-tag-face                 ((t :foreground ,blue)))
    `(rpm-spec-var-face                 ((t :foreground ,red)))
;;;;; rst-mode
    `(rst-level-1-face                  ((t :foreground ,orange)))
    `(rst-level-2-face                  ((t :foreground ,green+1)))
    `(rst-level-3-face                  ((t :foreground ,blue-1)))
    `(rst-level-4-face                  ((t :foreground ,yellow-2)))
    `(rst-level-5-face                  ((t :foreground ,cyan)))
    `(rst-level-6-face                  ((t :foreground ,green-2)))
;;;;; sh-mode
    `(sh-heredoc                        ((t :foreground ,yellow :weight bold)))
    `(sh-quoted-exec                    ((t :foreground ,red)))
;;;;; show-paren
    `(show-paren-mismatch               ((t :foreground ,red+1 :background ,bg+4)))
    `(show-paren-match                  ((t :foreground ,fg :background ,bg+4)))
;;;;; smartparens
    `(sp-show-pair-mismatch-face        ((t :foreground ,red+1 :background ,bg+4)))
    `(sp-show-pair-match-face           ((t :background ,bg+4 :weight bold)))
;;;;; sml-mode-line
    `(sml-modeline-end-face             ((t :inherit default :width condensed)))
;;;;; solaire
    `(solaire-default-face              ((t :inherit default :background ,bg-2)))
    `(solaire-minibuffer-face           ((t :inherit default :background ,bg-2)))
    `(solaire-hl-line-face              ((t :inherit hl-line :background ,bg)))
    `(solaire-org-hide-face             ((t :inherit org-hide :background ,bg-2)))
;;;;; term
    `(term-color-black                  ((t :foreground ,bg :background ,bg-3)))
    `(term-color-red                    ((t :foreground ,red-2 :background ,red-4)))
    `(term-color-green                  ((t :foreground ,green :background ,green+2)))
    `(term-color-yellow                 ((t :foreground ,orange :background ,yellow)))
    `(term-color-blue                   ((t :foreground ,blue-1 :background ,blue-4)))
    `(term-color-magenta                ((t :foreground ,magenta :background ,red)))
    `(term-color-cyan                   ((t :foreground ,cyan :background ,blue)))
    `(term-color-white                  ((t :foreground ,fg :background ,fg-2)))
    `(term-default-fg-color             ((t :inherit term-color-white)))
    `(term-default-bg-color             ((t :inherit term-color-black)))
;;;;; undo-tree
    `(undo-tree-visualizer-active-branch-face ((t :foreground ,fg+1 :weight bold)))
    `(undo-tree-visualizer-current-face ((t :foreground ,red-1 :weight bold)))
    `(undo-tree-visualizer-default-face ((t :foreground ,fg)))
    `(undo-tree-visualizer-register-face ((t :foreground ,yellow)))
    `(undo-tree-visualizer-unmodified-face ((t :foreground ,cyan)))
;;;;; visual-regexp
    `(vr/group-0                        ((t :foreground ,bg :background ,green)))
    `(vr/group-1                        ((t :foreground ,bg :background ,orange)))
    `(vr/group-2                        ((t :foreground ,bg :background ,blue)))
    `(vr/match-0                        ((t :inherit isearch)))
    `(vr/match-1                        ((t :foreground ,yellow-2 :background ,bg-3)))
    `(vr/match-separator-face           ((t :foreground ,red :weight bold)))
;;;;; volatile-highlights
    `(vhl/default-face                  ((t :background ,bg-1)))
;;;;; web-mode
    `(web-mode-builtin-face             ((t :inherit ,font-lock-builtin-face)))
    `(web-mode-comment-face             ((t :inherit ,font-lock-comment-face)))
    `(web-mode-constant-face            ((t :inherit ,font-lock-constant-face)))
    `(web-mode-css-at-rule-face         ((t :foreground ,orange )))
    `(web-mode-css-prop-face            ((t :foreground ,orange)))
    `(web-mode-css-pseudo-class-face    ((t :foreground ,green+3 :weight bold)))
    `(web-mode-css-rule-face            ((t :foreground ,blue)))
    `(web-mode-doctype-face             ((t :inherit ,font-lock-comment-face)))
    `(web-mode-folded-face              ((t :underline t)))
    `(web-mode-function-name-face       ((t :foreground ,blue)))
    `(web-mode-html-attr-name-face      ((t :foreground ,orange)))
    `(web-mode-html-attr-value-face     ((t :inherit ,font-lock-string-face)))
    `(web-mode-html-tag-face            ((t :foreground ,cyan)))
    `(web-mode-keyword-face             ((t :inherit ,font-lock-keyword-face)))
    `(web-mode-preprocessor-face        ((t :inherit ,font-lock-preprocessor-face)))
    `(web-mode-string-face              ((t :inherit ,font-lock-string-face)))
    `(web-mode-type-face                ((t :inherit ,font-lock-type-face)))
    `(web-mode-variable-name-face       ((t :inherit ,font-lock-variable-name-face)))
    `(web-mode-server-background-face   ((t :background ,bg)))
    `(web-mode-server-comment-face      ((t :inherit web-mode-comment-face)))
    `(web-mode-server-string-face       ((t :inherit web-mode-string-face)))
    `(web-mode-symbol-face              ((t :inherit font-lock-constant-face)))
    `(web-mode-warning-face             ((t :inherit font-lock-warning-face)))
    `(web-mode-whitespaces-face         ((t :background ,red)))
;;;;; whitespace-mode
    `(whitespace-space                  ((t :background ,bg+2 :foreground ,bg+2)))
    `(whitespace-hspace                 ((t :background ,bg+2 :foreground ,bg+2)))
    `(whitespace-tab                    ((t :background ,red-1)))
    `(whitespace-newline                ((t :foreground ,bg+2)))
    `(whitespace-trailing               ((t :background ,red)))
    `(whitespace-line                   ((t :background ,bg :foreground ,magenta)))
    `(whitespace-space-before-tab       ((t :background ,orange :foreground ,orange)))
    `(whitespace-indentation            ((t :background ,yellow :foreground ,red)))
    `(whitespace-empty                  ((t :background ,yellow)))
    `(whitespace-space-after-tab        ((t :background ,yellow :foreground ,red)))
;;;;; wanderlust
    `(wl-highlight-folder-few-face      ((t :foreground ,red-2)))
    `(wl-highlight-folder-many-face     ((t :foreground ,red-1)))
    `(wl-highlight-folder-path-face     ((t :foreground ,orange)))
    `(wl-highlight-folder-unknown-face  ((t :foreground ,blue)))
    `(wl-highlight-folder-unread-face   ((t :foreground ,blue)))
    `(wl-highlight-folder-zero-face     ((t :foreground ,fg)))
    `(wl-highlight-message-citation-header ((t :foreground ,red-1)))
    `(wl-highlight-message-cited-text-1 ((t :foreground ,red)))
    `(wl-highlight-message-cited-text-2 ((t :foreground ,green+2)))
    `(wl-highlight-message-cited-text-3 ((t :foreground ,blue)))
    `(wl-highlight-message-cited-text-4 ((t :foreground ,blue+1)))
    `(wl-highlight-message-header-contents ((t :foreground ,green+1)))
    `(wl-highlight-message-header-contents-face ((t :foreground ,green)))
    `(wl-highlight-message-headers-face ((t :foreground ,red+1)))
    `(wl-highlight-message-important-header-contents ((t :foreground ,green+2)))
    `(wl-highlight-message-important-header-contents2 ((t :foreground ,green+2)))
    `(wl-highlight-message-signature    ((t :foreground ,green)))
    `(wl-highlight-message-unimportant-header-contents ((t (:foreground ,fg))))
    `(wl-highlight-summary-answered-face ((t :foreground ,blue)))
    `(wl-highlight-summary-displaying-face ((t :underline t :weight bold)))
    `(wl-highlight-summary-disposed-face ((t :foreground ,fg :slant italic)))
    `(wl-highlight-summary-new-face     ((t :foreground ,blue)))
    `(wl-highlight-summary-normal-face  ((t :foreground ,fg)))
    `(wl-highlight-summary-refiled-face ((t :foreground ,fg)))
    `(wl-highlight-summary-thread-top-face ((t :foreground ,yellow)))
    `(wl-highlight-thread-indent-face   ((t :foreground ,magenta)))
;;;;; which-func-mode
    `(which-func                        ((t :foreground ,green+4)))
;;;;; xcscope
    `(cscope-file-face                  ((t :foreground ,yellow :weight bold)))
    `(cscope-function-face              ((t :foreground ,cyan :weight bold)))
    `(cscope-line-number-face           ((t :foreground ,red :weight bold)))
    `(cscope-mouse-face                 ((t :foreground ,bg :background ,blue+1)))
    `(cscope-separator-face             ((t :foreground ,red :underline t :overline t)))
;;;;; yascroll
    `(yascroll:thumb-text-area          ((t :background ,bg-3)))
    `(yascroll:thumb-fringe             ((t :background ,bg-3 :foreground ,bg-3)))))

;;; Theme Variables
(zenmelt-with-colors nil
  (custom-theme-set-variables 'zenmelt
;;;;; ansi-color
    `(ansi-color-names-vector [,bg ,red ,green ,yellow ,blue ,magenta ,cyan ,fg])
;;;;; company-quickhelp
    `(company-quickhelp-color-background ,bg+2)
    `(company-quickhelp-color-foreground ,fg)
;;;;; fill-column-indicator
    `(fci-rule-color ,bg-1)
;;;;; nrepl-client
    `(nrepl-message-colors
      '(,red ,orange ,yellow ,green ,green+4 ,cyan ,blue+1 ,magenta))
;;;;; pdf-tools
    `(pdf-view-midnight-colors '(,fg . ,bg-1))
;;;;; vc-annotate
    `(vc-annotate-color-map
      '(( 20. . ,red-1)
        ( 40. . ,red)
        ( 60. . ,orange)
        ( 80. . ,yellow-2)
        (100. . ,yellow-1)
        (120. . ,yellow)
        (140. . ,green-2)
        (160. . ,green)
        (180. . ,green+1)
        (200. . ,green+2)
        (220. . ,green+3)
        (240. . ,green+4)
        (260. . ,cyan)
        (280. . ,blue-2)
        (300. . ,blue-1)
        (320. . ,blue)
        (340. . ,blue+1)
        (360. . ,magenta)))
    `(vc-annotate-very-old-color ,magenta)
    `(vc-annotate-background ,bg-3)))

;;;###autoload
(when (and (boundp 'custom-theme-load-path) load-file-name)
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'zenmelt)

;;; zenmelt-theme.el ends here
